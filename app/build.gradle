/*
 * The first section in the build configuration applies the Android Gradle plugin to this build
 * and makes the android block available to specify Android-specific build options.
 */
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id("com.google.devtools.ksp")
}

/*
 * Locate (and possibly download) a JDK used to build your kotlin source code.
 * This also acts as a default for sourceCompatibility, targetCompatibility and jvmTarget.
 *
 * Note that this does not affect which JDK is used to run the Gradle build itself,
 * and does not need to take into account the JDK version required by Gradle plugins
 * (such as the Android Gradle Plugin)
 *
 * See compileOptions and kotlinOptions below, as both are related
 */
//kotlin {
//    jvmToolchain(17)
//}

/*
 * The android block is where you configure all your Android-specific build options.
 */
android {
    /*
     * The app's namespace. Used primarily to access app resources.
     */
    namespace 'com.huhn.androidarchitectureexample'
    compileSdk 34   //determines which Android and Java APIs are available when compiling the source code.
                    //  can use the API features included in this API level and lower.

    /*
     * The defaultConfig block encapsulates default settings and entries for all build variants
     * and can override some attributes in main/AndroidManifest.xml dynamically from the build system.
     *
     * You can override these values by configuring product flavors for different versions of your app.
     */
    defaultConfig {
        applicationId "com.huhn.androidarchitectureexample"  // Uniquely identifies the package for publishing.
        minSdk 24    //specifies the lowest version of Android that the app will run on
        targetSdk 34 //attests which version of Android you've tested against
                    // must be <= the value of compileSdk
                    // if runtime is on a higher API version,
                    //  app runs in compatibility mode that matches the targetSdk

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    /*
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release.
     *
     * The debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key.
     *
     * The release build type applies ProGuard settings and is not signed by default.
     */
    buildTypes {
        /*
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the default ProGuard rules file.
         */
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue("string", "build_type_res", "RELEASE")
            buildConfigField("String", "BUILD_TYPE_STRING", "\"RELEASE\"")
        }
        debug {
            resValue("string", "build_type_res", "DEBUG")
            buildConfigField("String", "BUILD_TYPE_STRING", "\"DEBUG_STRING\"")
        }
        builda {
            minifyEnabled false
            buildConfigField("String", "BUILD_TYPE_STRING", "\"BUILD A\"")
            resValue("string", "build_type_res", "BUILD A")
            signingConfig signingConfigs.debug
        }
        buildb {
            minifyEnabled false
            buildConfigField("String", "BUILD_TYPE_STRING", "\"BUILD B\"")
            resValue("string", "build_type_res", "BUILD B")
            signingConfig signingConfigs.debug
        }
    }
    /*
     * Product flavors are optional, and the build system does not create them by default.
     *
     * The productFlavors block is declares and configures multiple product flavors,
     * Each flavor overrides the defaultConfig block with their own settings.
     *
     * This example creates a free and paid product flavor.
     * Each product flavor then specifies its own application ID,
     * so that they can simultaneously exist on the Google Play Store, or an Android device.
     *
     * If you declare product flavors, you must also declare flavor dimensions
     * and assign each flavor to a flavor dimension.
     */
//    flavorDimensions += "tier"
//    productFlavors {
//        create("free") {
//            dimension = "tier"
//            applicationId = "com.example.myapp.free"
//        }
//
//        create("paid") {
//            dimension = "tier"
//            applicationId = "com.example.myapp.paid"
//        }
//    }



    /*
     * use options to override source and target compatibility
     * (if different from the toolchain JDK version),
     * All of these default to the same value as kotlin.jvmToolchain.
     *
     * If you're using the same version for these values and kotlin.jvmToolchain,
     *  you can remove these blocks.
     */
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    /*
     * need more on these
     */
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.4'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

/*
 * The dependencies block in the module-level build configuration file
 * specifies dependencies required to build only the module itself.
 */
dependencies {

    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.test:core-ktx:1.5.0'

    //compose
    implementation 'androidx.activity:activity-compose:1.8.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.6.2"
    androidTestImplementation project(path: ':app')

    //navigation
     def nav_version = "2.7.5"
    implementation "androidx.navigation:navigation-compose:$nav_version"

    //Room Library
    def room_version = "2.6.0"

    implementation "androidx.room:room-runtime:$room_version"
    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    //kotlin coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1"

    testImplementation ("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1")
//    testImplementation ("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.3") {
//         // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-debug#debug-agent-and-android
//        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
//    }


    //coroutine lifecycle scopes
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.6.2"

    //retrofit
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    //Koin for dependency
    def koin_version = "3.4.3"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-androidx-navigation:$koin_version"
    implementation "io.insert-koin:koin-androidx-compose:3.4.6"
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"


    // Lifecycle components
    implementation "androidx.compose.runtime:runtime-livedata:1.6.0-beta01"

    //Picasso - investigate Coin
//    implementation 'com.squareup.picasso:picasso:2.71828'
//    implementation 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}
kapt {
    correctErrorTypes = true
}